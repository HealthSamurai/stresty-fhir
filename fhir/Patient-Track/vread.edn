{ns fhir.Patient-Track.vread
 import #{sty}

 case
 {:zen/tags #{sty/case}
  :title "Patient vread test case"
  :steps
  [{:id :clear-patients
  	 :desc "Clear all patients"
    :do {:act sty/http :method :post :url "/$sql"
         :body "TRUNCATE patient"}
    :match {:by sty/matcho :status 200}},
    

   
   {:id :create-patient
   	:desc  "Create a patient for test"
    :do {:act sty/http 
    	    :method :post 
    	    :url "/Patient"
         :body {:resourceType "Patient" 
                :name [{:text "John"}] 
                :birthDate "1980-10-10"
                :gender "male"
                }
           }
    :match {:by sty/matcho :status sty/ok?
    	       :body {:id sty/string?
    	       	      :meta {:lastUpdated sty/string?
                          :versionId sty/string?}}
                   }}


   {:id :get-patient-history
   	:desc  "Get patient history"
    :do {:act sty/http :method :get
         :url (str (str "/Patient/" (get-in sty/state [:create-patient :body :id])) "/_history")
          }
    :match {:by sty/matcho :status sty/ok?
  	         :body {:resourceType "Bundle"
   	         	      :type "history" }}}


   {:id :get-patient-existing-version
  	 :desc  "Get particular version of the patient resource "
  	 :do {:act sty/http :method :get
         :url (str (str (str "/Patient/" (get-in sty/state [:create-patient :body :id])) "/_history/") (get-in sty/state [:create-patient :body :meta :versionId]))
          }
    :match {:by sty/matcho :status sty/ok?
    	       :body {:resourceType "Patient"
    	       	      :meta {:versionId (get-in sty/state [:create-patient :body :meta :versionId])}
    	         	      }}}


   {:id :read-non-existing-version-of-non-existing-resource-not-successful 
  		:desc  "Try to read non-existing version of non-existing patient resource"
  		:do {:act sty/http :method :get
         :url "/Patient/pt-3/_history/1"
          }
    :match {:by sty/matcho
      	     :status 404
    	         }}


   {:id :delete-created-patient
    :desc  "Delete created patient"
   	:do {:act sty/http :method :delete
         :url (str "/Patient/" (get-in sty/state [:create-patient :body :id]))
          }
    :match {:by sty/matcho
      	     :status sty/ok?
              }}


   {:id :get-history-for-deleted-patient
    :desc  "Get history for just deleted  patient"
    :do {:act sty/http :method :get
         :url (str (str "/Patient/" (get-in sty/state [:create-patient :body :id])) "/_history")
        }
    :match {:by sty/matcho
      	     :status 200
    	       :body {:entry [{:request {:method "DELETE"}, :resource {:resourceType "Patient"}}]}}}

]}}
